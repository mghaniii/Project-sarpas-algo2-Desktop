/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.project.kel.desktop.sarpas.view;

import com.mycompany.project.kel.desktop.sarpas.model.Barang;
import com.mycompany.project.kel.desktop.sarpas.dao.BarangDAO;
import com.mycompany.project.kel.desktop.sarpas.util.GlobalAppState;

import com.mycompany.project.kel.desktop.sarpas.model.Kategori; 
import com.mycompany.project.kel.desktop.sarpas.dao.KategoriDAO; 
import com.mycompany.project.kel.desktop.sarpas.model.Lokasi;   
import com.mycompany.project.kel.desktop.sarpas.dao.LokasiDAO;   

import javax.swing.*; 
import javax.swing.table.DefaultTableModel; 
import java.awt.*; 
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List; 
import java.util.function.Function; 

/**
 *
 * @author AXIOO
 */
public class InventarisAdminPanel extends javax.swing.JPanel {
     private BarangDAO barangDAO;
    private KategoriDAO kategoriDAO; 
    private LokasiDAO lokasiDAO;     

    private DefaultTableModel tableModel;
  

    /**
     * Creates new form InventarisAdminPanel
     */
    public InventarisAdminPanel() {
       initComponents();
        
        System.out.println("DEBUG - InventarisAdminPanel: Constructor dimulai."); 
        
        this.barangDAO = new BarangDAO();
        this.kategoriDAO = new KategoriDAO(); 
        this.lokasiDAO = new LokasiDAO();     
        
        // --- Hubungkan tableModel ke JTable ---
        tableModel = (DefaultTableModel) tblInventarisAdmin.getModel(); 
        System.out.println("DEBUG - InventarisAdminPanel: tableModel berhasil dihubungkan. Jumlah kolom: " + tableModel.getColumnCount());

        loadComboBoxData(); // Muat data untuk JComboBoxes Kategori dan Lokasi
        loadBarangData();   // Muat data barang ke tabel
        setupListeners();   // Setup listener untuk tombol-tombol
        setupFormState(false); //
        setupRoleBasedUI();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblInventarisAdmin = new javax.swing.JTable();
        btnSearchBarang = new javax.swing.JButton();
        txtSearchQuery = new javax.swing.JTextField();
        txtNamaBarang = new javax.swing.JTextField();
        txtKodeBarang = new javax.swing.JTextField();
        comboKategori = new javax.swing.JComboBox<>();
        txtJumlahTotal = new javax.swing.JTextField();
        txtJumlahTersedia = new javax.swing.JTextField();
        txtKondisi = new javax.swing.JTextField();
        btnAdd = new com.mycompany.project.kel.desktop.sarpas.view.RoundedButton();
        btnUpdate = new com.mycompany.project.kel.desktop.sarpas.view.RoundedButton();
        btnDelete = new com.mycompany.project.kel.desktop.sarpas.view.RoundedButton();
        btnClear = new com.mycompany.project.kel.desktop.sarpas.view.RoundedButton();
        comboLokasi = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(new java.awt.Color(255, 255, 255));

        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tblInventarisAdmin.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tblInventarisAdmin.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        tblInventarisAdmin.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID Barang", "ID Kategori", "ID Lokasi", "Kode Barang", "Nama Barang", "Jumlah Total", "Jumlah Tersedia", "Kondisi"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblInventarisAdmin.setSelectionBackground(new java.awt.Color(153, 153, 153));
        jScrollPane1.setViewportView(tblInventarisAdmin);

        btnSearchBarang.setBackground(new java.awt.Color(204, 204, 204));
        btnSearchBarang.setIcon(new javax.swing.ImageIcon("C:\\Users\\AXIOO\\Documents\\NetBeansProjects\\Project-kel-6-desktop-sarpas\\src\\main\\java\\img\\img\\iconcari.png")); // NOI18N
        btnSearchBarang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchBarangActionPerformed(evt);
            }
        });

        txtSearchQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchQueryActionPerformed(evt);
            }
        });

        txtNamaBarang.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        txtNamaBarang.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        txtKodeBarang.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        txtKodeBarang.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        comboKategori.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        comboKategori.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        txtJumlahTotal.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        txtJumlahTotal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtJumlahTotal.setMaximumSize(new java.awt.Dimension(80, 25));
        txtJumlahTotal.setMinimumSize(new java.awt.Dimension(80, 25));
        txtJumlahTotal.setPreferredSize(new java.awt.Dimension(80, 25));

        txtJumlahTersedia.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        txtJumlahTersedia.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtJumlahTersedia.setMaximumSize(new java.awt.Dimension(80, 25));
        txtJumlahTersedia.setMinimumSize(new java.awt.Dimension(80, 25));
        txtJumlahTersedia.setPreferredSize(new java.awt.Dimension(80, 25));

        txtKondisi.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        txtKondisi.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtKondisi.setMaximumSize(new java.awt.Dimension(100, 25));
        txtKondisi.setMinimumSize(new java.awt.Dimension(100, 25));
        txtKondisi.setPreferredSize(new java.awt.Dimension(100, 25));

        btnAdd.setBackground(new java.awt.Color(0, 153, 204));
        btnAdd.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd.setText("Klik tambah");

        btnUpdate.setBackground(new java.awt.Color(0, 153, 255));
        btnUpdate.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("Perbarui");

        btnDelete.setBackground(new java.awt.Color(0, 153, 255));
        btnDelete.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Hapus");

        btnClear.setBackground(new java.awt.Color(0, 153, 255));
        btnClear.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        btnClear.setForeground(new java.awt.Color(255, 255, 255));
        btnClear.setText("Clear From");

        comboLokasi.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        comboLokasi.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setText("Nama Barang");

        jLabel2.setText("Kode Barang");

        jLabel3.setText("Kategori");

        jLabel4.setText("Jumlah Total");

        jLabel5.setText("Jumlah Tersedia");

        jLabel6.setText("Kondisi");

        jLabel7.setText("Lokasi");

        jLabel8.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        jLabel8.setText("Inventaris Admin dan Teknisi");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(txtNamaBarang, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtKodeBarang, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(btnAdd)
                                .addGap(30, 30, 30)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(comboKategori, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnClear))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(155, 155, 155)
                                .addComponent(btnDelete)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnUpdate))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtJumlahTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel4)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtJumlahTersedia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(24, 24, 24)
                                        .addComponent(txtKondisi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel6)
                                        .addGap(40, 40, 40)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(comboLokasi, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(36, 36, 36)
                                        .addComponent(jLabel7))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(112, 112, 112)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 735, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtSearchQuery, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSearchBarang)
                                .addGap(260, 260, 260)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(jLabel1)
                        .addGap(41, 41, 41)
                        .addComponent(jLabel2)
                        .addGap(67, 67, 67)
                        .addComponent(jLabel3)))
                .addContainerGap(281, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtSearchQuery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSearchBarang, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNamaBarang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtKodeBarang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboKategori, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtJumlahTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtJumlahTersedia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtKondisi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboLokasi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addGap(88, 88, 88))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchBarangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchBarangActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSearchBarangActionPerformed

    private void txtSearchQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchQueryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchQueryActionPerformed

      private void setupRoleBasedUI() {
        // Ambil peran dari pengguna yang sedang login
        String role = GlobalAppState.getInstance().getCurrentUser().getRole();

        // Jika yang login adalah seorang teknisi
        if ("teknisi".equalsIgnoreCase(role)) {
            // Sembunyikan tombol Tambah dan Hapus
            btnAdd.setVisible(false);
            btnDelete.setVisible(false);

            // (Opsional) Anda juga bisa membuat beberapa field tidak bisa diedit oleh teknisi
            // Contoh: Teknisi tidak boleh mengubah nama atau kode barang
            // txtNamaBarang.setEditable(false);
            // txtKodeBarang.setEditable(false);
            // txtJumlahTotal.setEditable(false);
        }
        // Jika bukan teknisi (berarti admin), tidak perlu melakukan apa-apa
        // karena tombol akan terlihat secara default.
    }
    
    
    
    
    private void setupListeners() {
        if(btnAdd != null) btnAdd.addActionListener(e -> addBarang());
        if(btnUpdate != null) btnUpdate.addActionListener(e -> updateBarang());
        if(btnDelete != null) btnDelete.addActionListener(e -> deleteBarang());
        if(btnClear != null) btnClear.addActionListener(e -> clearForm());
        
        if(tblInventarisAdmin != null) {
            tblInventarisAdmin.getSelectionModel().addListSelectionListener(e -> {
                if (!e.getValueIsAdjusting() && tblInventarisAdmin.getSelectedRow() != -1) {
                    displayBarangDetails(tblInventarisAdmin.getSelectedRow());
                }
            });
        }
        
        if(btnSearchBarang != null && txtSearchQuery != null) {
            btnSearchBarang.addActionListener(e -> loadBarangData(txtSearchQuery.getText().trim()));
            txtSearchQuery.addActionListener(e -> loadBarangData(txtSearchQuery.getText().trim())); // Enter di search field
        }
    }

///////////////////

 private void loadComboBoxData() {
        // Untuk comboKategori
        if (comboKategori != null) {
            comboKategori.removeAllItems();
            List<Kategori> daftarKategori = kategoriDAO.getAllKategori();
            for (Kategori k : daftarKategori) {
                comboKategori.addItem(k);
            }
        }
        // Untuk comboLokasi
        if (comboLokasi != null) {
            comboLokasi.removeAllItems();
            List<Lokasi> daftarLokasi = lokasiDAO.getAllLokasi();
            for (Lokasi l : daftarLokasi) {
                comboLokasi.addItem(l);
            }
        }
        // Kondisi TIDAK LAGI PAKAI JComboBox di sini
    }
 
 /////////////////
 
 
// KODE SEBELUM DIPERBAIKI
// KODE SETELAH DIPERBAIKI
private void setupFormState(boolean isEditMode) {
    if (isEditMode) {
        if(btnAdd != null) btnAdd.setEnabled(false);
        if(btnUpdate != null) btnUpdate.setEnabled(true);
        if(btnDelete != null) btnDelete.setEnabled(true);
    }   else {
        // Ini yang terjadi saat panel pertama kali muncul
        if(btnUpdate != null) btnUpdate.setEnabled(false); // Tombol Perbarui non-aktif
        if(btnDelete != null) btnDelete.setEnabled(false); // Tombol Hapus non-aktif
    }
    // Panggilan ke clearForm() sudah dihapus. Lingkaran setan terputus!
}
 
 
private void displayBarangDetails(int rowIndex) {
    try { // <-- TAMBAHKAN TRY DI SINI
        if (rowIndex >= 0 && rowIndex < tableModel.getRowCount()) {
            int idBarang = (int) tableModel.getValueAt(rowIndex, 0);
            
            Barang barang = barangDAO.getBarangById(idBarang);
            
            if (barang != null) {
                if(txtNamaBarang != null) txtNamaBarang.setText(barang.getNamaBarang());
                if(txtKodeBarang != null) txtKodeBarang.setText(barang.getKodeBarang());
                
                // Set JComboBoxes Kategori dan Lokasi
                if (comboKategori != null) selectComboBoxItem(comboKategori, barang.getIdKategori(), Kategori::getIdKategori);
                if (comboLokasi != null)   selectComboBoxItem(comboLokasi, barang.getIdLokasi(), Lokasi::getIdLokasi);
                
                if(txtJumlahTotal != null) txtJumlahTotal.setText(String.valueOf(barang.getJumlahTotal()));
                if(txtJumlahTersedia != null) txtJumlahTersedia.setText(String.valueOf(barang.getJumlahTersedia()));
                
                if(txtKondisi != null) txtKondisi.setText(barang.getKondisi());
                
                // Baris ini hanya akan tercapai jika tidak ada error di atas
                setupFormState(true); // Set ke mode edit
            }
        }
    } catch (Exception e) { // <-- TAMBAHKAN CATCH DI SINI
        // Ini akan menampilkan pesan error jika ada masalah saat mengklik tabel
        System.err.println("Terjadi error saat menampilkan detail barang!");
        e.printStackTrace(); // Tampilkan detail error di console Output
        JOptionPane.showMessageDialog(this, "Gagal menampilkan detail data. Cek console untuk error.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}
  
   private <T> void selectComboBoxItem(JComboBox<T> comboBox, int idToSelect, Function<T, Integer> idExtractor) {
        for (int i = 0; i < comboBox.getItemCount(); i++) {
            T item = comboBox.getItemAt(i);
            if (idExtractor.apply(item).equals(idToSelect)) {
                comboBox.setSelectedIndex(i);
                return;
            }
        }
        comboBox.setSelectedIndex(-1); // Tidak ada yang terpilih
    }
   
   
    private void clearForm() {
        if(txtNamaBarang != null) txtNamaBarang.setText("");
        if(txtKodeBarang != null) txtKodeBarang.setText("");
        
        if(comboKategori != null) comboKategori.setSelectedIndex(-1); // Reset JComboBox
        if(comboLokasi != null) comboLokasi.setSelectedIndex(-1); // Reset JComboBox

        if(txtJumlahTotal != null) txtJumlahTotal.setText("");
        if(txtJumlahTersedia != null) txtJumlahTersedia.setText("");
        
        if(txtKondisi != null) txtKondisi.setText(""); // Reset JTextField
        
        setupFormState(false);
    }

    public void loadBarangData() {
        loadBarangData(""); 
    }
    
     public void loadBarangData(String keyword) {
        tableModel.setRowCount(0); 
        List<Barang> daftarBarang;
        if (keyword.isEmpty()) {
            daftarBarang = barangDAO.getAllBarang();
        } else {
            daftarBarang = barangDAO.searchBarang(keyword); 
        }

        System.out.println("DEBUG - InventarisAdminPanel: Memuat data barang. Jumlah data: " + (daftarBarang != null ? daftarBarang.size() : 0));

        if (daftarBarang != null && !daftarBarang.isEmpty()) {
            for (Barang barang : daftarBarang) {
                // Pastikan urutan dan jumlah kolom di sini cocok persis dengan JTable Design Mode (8 kolom)
                tableModel.addRow(new Object[]{
                    barang.getIdBarang(),
                    barang.getIdKategori(),
                    barang.getIdLokasi(),
                    barang.getKodeBarang(),
                    barang.getNamaBarang(),
                    barang.getJumlahTotal(),
                    barang.getJumlahTersedia(),
                    barang.getKondisi()
                });
            }
            System.out.println("DEBUG - InventarisAdminPanel: " + tableModel.getRowCount() + " baris ditambahkan ke tabel.");
        } else {
            System.out.println("DEBUG - InventarisAdminPanel: Database mengembalikan daftar barang kosong atau pencarian tidak ditemukan.");
        }
    }

    // --- Metode CRUD ---
    private void addBarang() {
        try {
            if (!validateFormFields()) return; 

            // Ambil ID Kategori dan Lokasi dari ComboBox
            Kategori selectedKategori = (Kategori) comboKategori.getSelectedItem();
            Lokasi selectedLokasi = (Lokasi) comboLokasi.getSelectedItem();
            
            if (selectedKategori == null || selectedLokasi == null) {
                JOptionPane.showMessageDialog(this, "Kategori dan Lokasi wajib dipilih.", "Validasi", JOptionPane.WARNING_MESSAGE);
                return;
            }
            int idKategori = selectedKategori.getIdKategori();
            int idLokasi = selectedLokasi.getIdLokasi();
            
            String kondisi = txtKondisi.getText(); // Ambil dari JTextField


            Barang newBarang = new Barang(
                idKategori,
                idLokasi,
                txtKodeBarang.getText(),
                txtNamaBarang.getText(),
                Integer.parseInt(txtJumlahTotal.getText()),
                Integer.parseInt(txtJumlahTersedia.getText()),
                kondisi
            );

            if (barangDAO.addBarang(newBarang)) {
                JOptionPane.showMessageDialog(this, "Barang berhasil ditambahkan!", "Sukses", JOptionPane.INFORMATION_MESSAGE);
                loadBarangData();
                clearForm();
            } else {
                JOptionPane.showMessageDialog(this, "Gagal menambahkan barang. Cek konsol.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Jumlah Total/Tersedia harus angka.", "Input Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Terjadi error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    private void updateBarang() {
        int selectedRow = tblInventarisAdmin.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih barang yang ingin diupdate dari tabel.", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }
        try {
            int idBarang = (int) tableModel.getValueAt(selectedRow, 0); 
            
            if (!validateFormFields()) return;

            Kategori selectedKategori = (Kategori) comboKategori.getSelectedItem();
            Lokasi selectedLokasi = (Lokasi) comboLokasi.getSelectedItem();
            
            if (selectedKategori == null || selectedLokasi == null) {
                JOptionPane.showMessageDialog(this, "Kategori dan Lokasi wajib dipilih.", "Validasi", JOptionPane.WARNING_MESSAGE);
                return;
            }
            int idKategori = selectedKategori.getIdKategori();
            int idLokasi = selectedLokasi.getIdLokasi();

            String kondisi = txtKondisi.getText();


            Barang updatedBarang = new Barang(
                idBarang, 
                idKategori,
                idLokasi,
                txtKodeBarang.getText(),
                txtNamaBarang.getText(),
                Integer.parseInt(txtJumlahTotal.getText()),
                Integer.parseInt(txtJumlahTersedia.getText()),
                kondisi
            );

            if (barangDAO.updateBarang(updatedBarang)) {
                JOptionPane.showMessageDialog(this, "Barang berhasil diupdate!", "Sukses", JOptionPane.INFORMATION_MESSAGE);
                loadBarangData(); 
                clearForm();      
            } else {
                JOptionPane.showMessageDialog(this, "Gagal mengupdate barang. Cek konsol.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Jumlah Total/Tersedia harus angka.", "Input Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Terjadi error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    private void deleteBarang() {
        int selectedRow = tblInventarisAdmin.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih barang yang ingin dihapus dari tabel.", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "Anda yakin ingin menghapus barang ini?", "Konfirmasi Hapus", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                int idBarang = (int) tableModel.getValueAt(selectedRow, 0); 

                if (barangDAO.deleteBarang(idBarang)) {
                    JOptionPane.showMessageDialog(this, "Barang berhasil dihapus!", "Sukses", JOptionPane.INFORMATION_MESSAGE);
                    loadBarangData(); 
                    clearForm();      
                } else {
                    JOptionPane.showMessageDialog(this, "Gagal menghapus barang. Cek konsol.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Terjadi error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }
    
    private boolean validateFormFields() {
        if (txtNamaBarang.getText().trim().isEmpty() || 
            txtKodeBarang.getText().trim().isEmpty() ||
            txtJumlahTotal.getText().trim().isEmpty() || 
            txtJumlahTersedia.getText().trim().isEmpty() ||
            txtKondisi.getText().trim().isEmpty() || 
            comboKategori.getSelectedItem() == null || 
            comboLokasi.getSelectedItem() == null     
            ) {
            JOptionPane.showMessageDialog(this, "Semua field wajib diisi.", "Validasi", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        try {
            Integer.parseInt(txtJumlahTotal.getText().trim());
            Integer.parseInt(txtJumlahTersedia.getText().trim());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Jumlah Total/Tersedia harus angka.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }








    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSearchBarang;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<Kategori> comboKategori;
    private javax.swing.JComboBox<Lokasi> comboLokasi;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblInventarisAdmin;
    private javax.swing.JTextField txtJumlahTersedia;
    private javax.swing.JTextField txtJumlahTotal;
    private javax.swing.JTextField txtKodeBarang;
    private javax.swing.JTextField txtKondisi;
    private javax.swing.JTextField txtNamaBarang;
    private javax.swing.JTextField txtSearchQuery;
    // End of variables declaration//GEN-END:variables
}
